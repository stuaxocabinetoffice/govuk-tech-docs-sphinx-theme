name: govuk-tech-docs-sphinx-theme deploy package and documentation

on:
  release:
    types: [released]
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev

      - name: Install dependencies
        run: make dependencies

      - name: Build wheel for Python ${{ matrix.python-version }}
        run: poetry build

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-py${{ matrix.python-version }}
          path: dist/
          retention-days: 1

  deploy-package-and-documentation:
    name: Deploy package and documentation
    needs: build-wheels
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3.12
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev

      - name: Install dependencies
        run: make dependencies

      - name: Create documentation
        run: make docs

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-py*
          merge-multiple: true
          path: dist/

      - name: Build package
        run: poetry build

      - name: Upload wheels to GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set the deployment configuration for Poetry
        if: env.PYPI_API_TOKEN != ''
        run: poetry config pypi-token.pypi "$PYPI_API_TOKEN"
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        shell: bash

      - name: Warn about missing PyPI token
        if: env.PYPI_API_TOKEN == ''
        run: |
          echo "::warning::PYPI_API_TOKEN secret not found. Skipping PyPI deployment."
          echo "To enable PyPI publishing, add PYPI_API_TOKEN to repository secrets."
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish to GitHub Pages
        if: startsWith(github.ref, 'refs/tags')
        uses: JamesIves/github-pages-deploy-action@v4.6.4
        with:
          branch: gh-pages
          folder: docs/_build

      - name: Deploy package to PyPI (all Python versions)
        if: startsWith(github.ref, 'refs/tags') && env.PYPI_API_TOKEN != ''
        run: |
          echo "Publishing all wheels to PyPI..."
          poetry publish --dist-dir dist
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
