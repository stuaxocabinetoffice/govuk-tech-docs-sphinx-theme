name: govuk-tech-docs-sphinx-theme build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ["3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached virtual environment
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root --with dev
        shell: bash

      - name: Install library and dependencies
        run: |
          if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "macOS" ]]; then
            make dependencies
          elif [ "$RUNNER_OS" == "Windows" ]; then
            poetry install --no-interaction --with dev
            poetry run pre-commit install
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi;
        shell: bash

      - name: Run pre-commit hooks
        run: |
          poetry run pre-commit run --all-files
        shell: bash

      - name: Create documentation
        run: |
          if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "macOS" ]]; then
            make docs
          elif [ "$RUNNER_OS" == "Windows" ]; then
            poetry run sphinx-build -b html ./docs ./docs/_build
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi;
        shell: bash

      - name: Execute tests, and create coverage report
        run: |
          if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "macOS" ]]; then
            poetry run make coverage_xml
          elif [ "$RUNNER_OS" == "Windows" ]; then
            poetry run coverage run -m pytest
            poetry run coverage xml
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi;
        shell: bash

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          env_vars: OS=${{ matrix.os }},PYTHON=${{ matrix.python }}
